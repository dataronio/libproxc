
// alt pseudo code:
// alting consists of zero or more choices. Each choice is either an
// chan send, chan recv, or timeout. If a timeout is specified, the
// alt will wait for a single chan operation to be ready within the
// specified timeout. If one or more channel reads or writes are specified
// for the same channel, only one read or write will be chosen as the only
// read or write for the given alting process. if both a read or write is
// specified for the same channel, both choices will be disregarded.
// choices from now on means all channel send or recvs for the given alt.
//
// One of two scenarios exists when alting. Either, one or more choices
// are ready for completing choice. Or, none are. If some are ready, all
// ready choices are stored in a vector. The vector is shuffled. Iterating
// over the vector, each choice is trying to complete. The first choice
// succeeding is the alting choice. If none completes, or none are ready
// to begin with, the alt waits. It is now up to the choices to set the
// selected pointer, which points to the "winning" choice. When the pointer
// is set, the alt wakes up and continues with the "winning" choice.
//
// When checking all choices if they are ready, none of the choices can
// set the selected pointer. Only when the alt has found no ready choices, or
// none of the ready choices completed, and then waits is the selected pointer
// possible to be set. The selected pointer is set through one CAS (compare-and-swap).
//
// The alting process registers and deregisters its interest to complete a choice
// with "entering" and "leaving" a choice. "Entering" involves setting a pointer to the
// given alt, allowing choices to set the selected pointer if its not set by the alt
// process itself. "Leaving" involves erasing this pointer.
//
// stage 1
//      all choices are "entered", allowing all choices to set the selected pointer.
//      note however that choices cant try to set the selected pointer before alt
//      chooses to wait, even though it might try to do this before it waits.
// stage 2
//      if zero choices are ready, go to stage 3. Else, one or more choices are ready.
//      all ready choices are collected into a vector. This vector is shuffled, then
//      iterated over. Each ready choice tried to complete its operation. If this
//      succeeds, then the selected pointer is set, and goes to stage 4. If none
//      completes, then it continues to stage 3.
// stage 3
//      The selected pointer is now possible to bet set by choices. the alting proces
//      waits in the mean time. When woken up, one choice has set the selected pointer,
//      and continues to stage 4.
// stage 4
//      all choices are "leaved", erasing the alt pointer. After "leaving", the
//      selected choice has now completed its operation, and the corresponding
//      function, if specified, is executed.

void alt_pseudocode()
{
    cases = vector< Case >;
    if ( cases.empty ) {
        wait_forever();
        // unreachable
    }

    foreach c in cases {
        c.enter();
    }

    selected = nullptr;
    ready = vector< Case >; // empty, capacity = ???
    while ( selected == nullptr ) {
        ready.clear();
        foreach c in cases {
            if ( c.ready() ) {
                ready.insert( c );
            }
        }

        if ( ready.empty ) {
            alt.wait();
            // woken up, one or more cases should be ready
            continue;
        }

        shuffle( ready );
        foreach c in ready {
            if ( c.synchronize ) {
                selected = c;
                break;
            }
        }
    }

    foreach c in cases {
        c.leave();
    }

    selected.complete();
}
